 <class 'models.resnet.ResNet'>
conv1 <class 'quant.quant_module.QuantizedLayer'>
conv1.module <class 'quant.quant_module.QConv2d'>
conv1.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
conv1.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
conv1.layer_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
conv1.layer_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
conv1.activation <class 'torch.nn.modules.activation.ReLU'>
bn1 <class 'utils.fold_bn.StraightThrough'>
relu <class 'utils.fold_bn.StraightThrough'>
maxpool <class 'torch.nn.modules.pooling.MaxPool2d'>
layer1 <class 'torch.nn.modules.container.Sequential'>
layer1.0 <class 'utils.model_utils.QuantBasicBlock'>
layer1.0.conv1_relu <class 'quant.quant_module.QuantizedLayer'>
layer1.0.conv1_relu.module <class 'quant.quant_module.QConv2d'>
layer1.0.conv1_relu.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer1.0.conv1_relu.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer1.0.conv1_relu.activation <class 'torch.nn.modules.activation.ReLU'>
layer1.0.conv1_relu.layer_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer1.0.conv1_relu.layer_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer1.0.conv2 <class 'quant.quant_module.QuantizedLayer'>
layer1.0.conv2.module <class 'quant.quant_module.QConv2d'>
layer1.0.conv2.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer1.0.conv2.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer1.0.activation <class 'torch.nn.modules.activation.ReLU'>
layer1.0.block_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer1.0.block_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer1.0.block_post_act_fake_quantize_low <class 'quant.fake_quant.LSQFakeQuantize'>
layer1.0.block_post_act_fake_quantize_low.observer <class 'quant.observer.MSEObserver'>
layer1.0.block_post_act_fake_quantize_med <class 'quant.fake_quant.LSQFakeQuantize'>
layer1.0.block_post_act_fake_quantize_med.observer <class 'quant.observer.MSEObserver'>
layer1.0.block_post_act_fake_quantize_high <class 'quant.fake_quant.LSQFakeQuantize'>
layer1.0.block_post_act_fake_quantize_high.observer <class 'quant.observer.MSEObserver'>
layer1.1 <class 'utils.model_utils.QuantBasicBlock'>
layer1.1.conv1_relu <class 'quant.quant_module.QuantizedLayer'>
layer1.1.conv1_relu.module <class 'quant.quant_module.QConv2d'>
layer1.1.conv1_relu.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer1.1.conv1_relu.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer1.1.conv1_relu.activation <class 'torch.nn.modules.activation.ReLU'>
layer1.1.conv1_relu.layer_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer1.1.conv1_relu.layer_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer1.1.conv2 <class 'quant.quant_module.QuantizedLayer'>
layer1.1.conv2.module <class 'quant.quant_module.QConv2d'>
layer1.1.conv2.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer1.1.conv2.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer1.1.activation <class 'torch.nn.modules.activation.ReLU'>
layer1.1.block_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer1.1.block_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer1.1.block_post_act_fake_quantize_low <class 'quant.fake_quant.LSQFakeQuantize'>
layer1.1.block_post_act_fake_quantize_low.observer <class 'quant.observer.MSEObserver'>
layer1.1.block_post_act_fake_quantize_med <class 'quant.fake_quant.LSQFakeQuantize'>
layer1.1.block_post_act_fake_quantize_med.observer <class 'quant.observer.MSEObserver'>
layer1.1.block_post_act_fake_quantize_high <class 'quant.fake_quant.LSQFakeQuantize'>
layer1.1.block_post_act_fake_quantize_high.observer <class 'quant.observer.MSEObserver'>
layer2 <class 'torch.nn.modules.container.Sequential'>
layer2.0 <class 'utils.model_utils.QuantBasicBlock'>
layer2.0.conv1_relu <class 'quant.quant_module.QuantizedLayer'>
layer2.0.conv1_relu.module <class 'quant.quant_module.QConv2d'>
layer2.0.conv1_relu.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer2.0.conv1_relu.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer2.0.conv1_relu.activation <class 'torch.nn.modules.activation.ReLU'>
layer2.0.conv1_relu.layer_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer2.0.conv1_relu.layer_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer2.0.conv2 <class 'quant.quant_module.QuantizedLayer'>
layer2.0.conv2.module <class 'quant.quant_module.QConv2d'>
layer2.0.conv2.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer2.0.conv2.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer2.0.downsample <class 'quant.quant_module.QuantizedLayer'>
layer2.0.downsample.module <class 'quant.quant_module.QConv2d'>
layer2.0.downsample.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer2.0.downsample.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer2.0.activation <class 'torch.nn.modules.activation.ReLU'>
layer2.0.block_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer2.0.block_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer2.0.block_post_act_fake_quantize_low <class 'quant.fake_quant.LSQFakeQuantize'>
layer2.0.block_post_act_fake_quantize_low.observer <class 'quant.observer.MSEObserver'>
layer2.0.block_post_act_fake_quantize_med <class 'quant.fake_quant.LSQFakeQuantize'>
layer2.0.block_post_act_fake_quantize_med.observer <class 'quant.observer.MSEObserver'>
layer2.0.block_post_act_fake_quantize_high <class 'quant.fake_quant.LSQFakeQuantize'>
layer2.0.block_post_act_fake_quantize_high.observer <class 'quant.observer.MSEObserver'>
layer2.1 <class 'utils.model_utils.QuantBasicBlock'>
layer2.1.conv1_relu <class 'quant.quant_module.QuantizedLayer'>
layer2.1.conv1_relu.module <class 'quant.quant_module.QConv2d'>
layer2.1.conv1_relu.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer2.1.conv1_relu.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer2.1.conv1_relu.activation <class 'torch.nn.modules.activation.ReLU'>
layer2.1.conv1_relu.layer_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer2.1.conv1_relu.layer_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer2.1.conv2 <class 'quant.quant_module.QuantizedLayer'>
layer2.1.conv2.module <class 'quant.quant_module.QConv2d'>
layer2.1.conv2.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer2.1.conv2.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer2.1.activation <class 'torch.nn.modules.activation.ReLU'>
layer2.1.block_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer2.1.block_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer2.1.block_post_act_fake_quantize_low <class 'quant.fake_quant.LSQFakeQuantize'>
layer2.1.block_post_act_fake_quantize_low.observer <class 'quant.observer.MSEObserver'>
layer2.1.block_post_act_fake_quantize_med <class 'quant.fake_quant.LSQFakeQuantize'>
layer2.1.block_post_act_fake_quantize_med.observer <class 'quant.observer.MSEObserver'>
layer2.1.block_post_act_fake_quantize_high <class 'quant.fake_quant.LSQFakeQuantize'>
layer2.1.block_post_act_fake_quantize_high.observer <class 'quant.observer.MSEObserver'>
layer3 <class 'torch.nn.modules.container.Sequential'>
layer3.0 <class 'utils.model_utils.QuantBasicBlock'>
layer3.0.conv1_relu <class 'quant.quant_module.QuantizedLayer'>
layer3.0.conv1_relu.module <class 'quant.quant_module.QConv2d'>
layer3.0.conv1_relu.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer3.0.conv1_relu.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer3.0.conv1_relu.activation <class 'torch.nn.modules.activation.ReLU'>
layer3.0.conv1_relu.layer_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer3.0.conv1_relu.layer_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer3.0.conv2 <class 'quant.quant_module.QuantizedLayer'>
layer3.0.conv2.module <class 'quant.quant_module.QConv2d'>
layer3.0.conv2.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer3.0.conv2.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer3.0.downsample <class 'quant.quant_module.QuantizedLayer'>
layer3.0.downsample.module <class 'quant.quant_module.QConv2d'>
layer3.0.downsample.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer3.0.downsample.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer3.0.activation <class 'torch.nn.modules.activation.ReLU'>
layer3.0.block_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer3.0.block_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer3.0.block_post_act_fake_quantize_low <class 'quant.fake_quant.LSQFakeQuantize'>
layer3.0.block_post_act_fake_quantize_low.observer <class 'quant.observer.MSEObserver'>
layer3.0.block_post_act_fake_quantize_med <class 'quant.fake_quant.LSQFakeQuantize'>
layer3.0.block_post_act_fake_quantize_med.observer <class 'quant.observer.MSEObserver'>
layer3.0.block_post_act_fake_quantize_high <class 'quant.fake_quant.LSQFakeQuantize'>
layer3.0.block_post_act_fake_quantize_high.observer <class 'quant.observer.MSEObserver'>
layer3.1 <class 'utils.model_utils.QuantBasicBlock'>
layer3.1.conv1_relu <class 'quant.quant_module.QuantizedLayer'>
layer3.1.conv1_relu.module <class 'quant.quant_module.QConv2d'>
layer3.1.conv1_relu.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer3.1.conv1_relu.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer3.1.conv1_relu.activation <class 'torch.nn.modules.activation.ReLU'>
layer3.1.conv1_relu.layer_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer3.1.conv1_relu.layer_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer3.1.conv2 <class 'quant.quant_module.QuantizedLayer'>
layer3.1.conv2.module <class 'quant.quant_module.QConv2d'>
layer3.1.conv2.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer3.1.conv2.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer3.1.activation <class 'torch.nn.modules.activation.ReLU'>
layer3.1.block_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer3.1.block_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer3.1.block_post_act_fake_quantize_low <class 'quant.fake_quant.LSQFakeQuantize'>
layer3.1.block_post_act_fake_quantize_low.observer <class 'quant.observer.MSEObserver'>
layer3.1.block_post_act_fake_quantize_med <class 'quant.fake_quant.LSQFakeQuantize'>
layer3.1.block_post_act_fake_quantize_med.observer <class 'quant.observer.MSEObserver'>
layer3.1.block_post_act_fake_quantize_high <class 'quant.fake_quant.LSQFakeQuantize'>
layer3.1.block_post_act_fake_quantize_high.observer <class 'quant.observer.MSEObserver'>
layer4 <class 'torch.nn.modules.container.Sequential'>
layer4.0 <class 'utils.model_utils.QuantBasicBlock'>
layer4.0.conv1_relu <class 'quant.quant_module.QuantizedLayer'>
layer4.0.conv1_relu.module <class 'quant.quant_module.QConv2d'>
layer4.0.conv1_relu.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer4.0.conv1_relu.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer4.0.conv1_relu.activation <class 'torch.nn.modules.activation.ReLU'>
layer4.0.conv1_relu.layer_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer4.0.conv1_relu.layer_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer4.0.conv2 <class 'quant.quant_module.QuantizedLayer'>
layer4.0.conv2.module <class 'quant.quant_module.QConv2d'>
layer4.0.conv2.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer4.0.conv2.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer4.0.downsample <class 'quant.quant_module.QuantizedLayer'>
layer4.0.downsample.module <class 'quant.quant_module.QConv2d'>
layer4.0.downsample.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer4.0.downsample.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer4.0.activation <class 'torch.nn.modules.activation.ReLU'>
layer4.0.block_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer4.0.block_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer4.0.block_post_act_fake_quantize_low <class 'quant.fake_quant.LSQFakeQuantize'>
layer4.0.block_post_act_fake_quantize_low.observer <class 'quant.observer.MSEObserver'>
layer4.0.block_post_act_fake_quantize_med <class 'quant.fake_quant.LSQFakeQuantize'>
layer4.0.block_post_act_fake_quantize_med.observer <class 'quant.observer.MSEObserver'>
layer4.0.block_post_act_fake_quantize_high <class 'quant.fake_quant.LSQFakeQuantize'>
layer4.0.block_post_act_fake_quantize_high.observer <class 'quant.observer.MSEObserver'>
layer4.1 <class 'utils.model_utils.QuantBasicBlock'>
layer4.1.conv1_relu <class 'quant.quant_module.QuantizedLayer'>
layer4.1.conv1_relu.module <class 'quant.quant_module.QConv2d'>
layer4.1.conv1_relu.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer4.1.conv1_relu.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer4.1.conv1_relu.activation <class 'torch.nn.modules.activation.ReLU'>
layer4.1.conv1_relu.layer_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer4.1.conv1_relu.layer_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer4.1.conv2 <class 'quant.quant_module.QuantizedLayer'>
layer4.1.conv2.module <class 'quant.quant_module.QConv2d'>
layer4.1.conv2.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
layer4.1.conv2.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
layer4.1.activation <class 'torch.nn.modules.activation.ReLU'>
layer4.1.block_post_act_fake_quantize <class 'quant.fake_quant.LSQFakeQuantize'>
layer4.1.block_post_act_fake_quantize.observer <class 'quant.observer.MSEObserver'>
layer4.1.block_post_act_fake_quantize_low <class 'quant.fake_quant.LSQFakeQuantize'>
layer4.1.block_post_act_fake_quantize_low.observer <class 'quant.observer.MSEObserver'>
layer4.1.block_post_act_fake_quantize_med <class 'quant.fake_quant.LSQFakeQuantize'>
layer4.1.block_post_act_fake_quantize_med.observer <class 'quant.observer.MSEObserver'>
layer4.1.block_post_act_fake_quantize_high <class 'quant.fake_quant.LSQFakeQuantize'>
layer4.1.block_post_act_fake_quantize_high.observer <class 'quant.observer.MSEObserver'>
avgpool <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'>
fc <class 'quant.quant_module.QuantizedLayer'>
fc.module <class 'quant.quant_module.QLinear'>
fc.module.weight_fake_quant <class 'quant.fake_quant.AdaRoundFakeQuantize'>
fc.module.weight_fake_quant.observer <class 'quant.observer.MSEObserver'>
Starting model calibration...
Completed model calibration
Starting block reconstruction...
Iter: 0, Loss: 0.000, round_loss: 0.000, recon_loss: 0.000
Iter: 200, Loss: 80.699, round_loss: 80.699, recon_loss: 0.000
Iter: 400, Loss: 66.462, round_loss: 66.462, recon_loss: 0.000
Iter: 600, Loss: 41.959, round_loss: 41.959, recon_loss: 0.000
Iter: 800, Loss: 26.484, round_loss: 26.484, recon_loss: 0.000
Iter: 0, Loss: 2.389, round_loss: 0.000, recon_loss: 2.389
Iter: 200, Loss: 659.164, round_loss: 656.970, recon_loss: 2.194
Iter: 400, Loss: 553.913, round_loss: 551.830, recon_loss: 2.083
Iter: 600, Loss: 429.294, round_loss: 427.006, recon_loss: 2.288
Iter: 800, Loss: 348.147, round_loss: 346.128, recon_loss: 2.018
Iter: 0, Loss: 9.474, round_loss: 0.000, recon_loss: 9.474
Iter: 200, Loss: 709.054, round_loss: 700.771, recon_loss: 8.283
Iter: 400, Loss: 603.125, round_loss: 594.449, recon_loss: 8.677
Iter: 600, Loss: 483.674, round_loss: 475.674, recon_loss: 8.000
Iter: 800, Loss: 401.326, round_loss: 393.762, recon_loss: 7.565
Iter: 0, Loss: 3.360, round_loss: 0.000, recon_loss: 3.360
Iter: 200, Loss: 2183.140, round_loss: 2179.761, recon_loss: 3.379
Iter: 400, Loss: 1826.433, round_loss: 1823.630, recon_loss: 2.803
Iter: 600, Loss: 1355.698, round_loss: 1352.525, recon_loss: 3.173
Iter: 800, Loss: 1063.525, round_loss: 1060.342, recon_loss: 3.183
Iter: 0, Loss: 4.428, round_loss: 0.000, recon_loss: 4.428
Iter: 200, Loss: 2808.644, round_loss: 2804.478, recon_loss: 4.166
Iter: 400, Loss: 2346.969, round_loss: 2342.926, recon_loss: 4.043
Iter: 600, Loss: 1716.572, round_loss: 1712.496, recon_loss: 4.076
Iter: 800, Loss: 1333.428, round_loss: 1329.262, recon_loss: 4.166
Iter: 0, Loss: 1.738, round_loss: 0.000, recon_loss: 1.738
Iter: 200, Loss: 8730.042, round_loss: 8728.430, recon_loss: 1.612
Iter: 400, Loss: 7270.308, round_loss: 7268.794, recon_loss: 1.514
Iter: 600, Loss: 5129.721, round_loss: 5128.140, recon_loss: 1.581
Iter: 800, Loss: 3871.946, round_loss: 3870.317, recon_loss: 1.629
Iter: 0, Loss: 1.853, round_loss: 0.000, recon_loss: 1.853
Iter: 200, Loss: 11221.222, round_loss: 11219.258, recon_loss: 1.963
Iter: 400, Loss: 9340.088, round_loss: 9338.184, recon_loss: 1.904
Iter: 600, Loss: 6537.425, round_loss: 6535.459, recon_loss: 1.966
Iter: 800, Loss: 4894.434, round_loss: 4892.522, recon_loss: 1.912
Iter: 0, Loss: 1.807, round_loss: 0.000, recon_loss: 1.807
Iter: 200, Loss: 34930.961, round_loss: 34929.266, recon_loss: 1.696
Iter: 400, Loss: 29070.842, round_loss: 29069.078, recon_loss: 1.763
Iter: 600, Loss: 20266.445, round_loss: 20264.816, recon_loss: 1.629
Iter: 800, Loss: 15120.664, round_loss: 15118.938, recon_loss: 1.726
Iter: 0, Loss: 108.232, round_loss: 0.000, recon_loss: 108.232
Iter: 200, Loss: 45011.648, round_loss: 44904.824, recon_loss: 106.824
Iter: 400, Loss: 38177.316, round_loss: 38077.812, recon_loss: 99.504
Iter: 600, Loss: 31069.734, round_loss: 30979.287, recon_loss: 90.448
Iter: 800, Loss: 26271.635, round_loss: 26169.592, recon_loss: 102.044
Iter: 0, Loss: 0.078, round_loss: 0.000, recon_loss: 0.078
Iter: 200, Loss: 4868.845, round_loss: 4868.771, recon_loss: 0.074
Iter: 400, Loss: 4040.638, round_loss: 4040.563, recon_loss: 0.075
Iter: 600, Loss: 2609.470, round_loss: 2609.405, recon_loss: 0.065
Iter: 800, Loss: 1743.312, round_loss: 1743.229, recon_loss: 0.083
Completed block reconstruction
Block reconstruction took 256.15180802345276 seconds
Starting model evaluation of W5A5 block reconstruction (low)...
Top-1 accuracy: 69.10, Top-5 accuracy: 88.70
Starting model evaluation of W5A6 block reconstruction (med)...
Top-1 accuracy: 69.27, Top-5 accuracy: 88.77
Starting model evaluation of W5A8 block reconstruction (high)...
Top-1 accuracy: 69.21, Top-5 accuracy: 88.79
